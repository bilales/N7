function k = recuit_simule(k,AD,beta,T)

% k la matrice des voisinages

[n,p, ~] = size(AD);

for i=1:n
    for j=1:p
        %on extrait la sous matrice de k, voisinage du pixel au centre 
        %en prenant garde aux bornes
        voisinage_k = k(max(2,i)-1:min(n-1,i)+1,max(2,i)-1:min(n-1,i)+1);
        %classe du pixel central
        k= voisinage_k(2,2)
        %calcul energie locale avec la classe du pixel au centre
        Us = 0.5*AD(i,j,k) + beta*(sum(sum(voisinage_k~=i_k)));

        %calcul nouvealle energie, k' tirée aléatoirement
        k_prime = 0;
        while k_prime == k
            k_prime = randi(4)
        end

        Us_prime = 0.5*AD(i,j,k_prime) + beta*(sum(sum(voisinage_k~=k_prime)));

        %comparison

        if Us_prime < Us
            k= ks_prime;
        else
            if rand<exp(-(Us_prime-Us)/T)





end

