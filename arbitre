package allumettes;

public class Arbitre  {
	
	private Joueur joueur1;
	private Joueur joueur2;
	private boolean confiant;

	

	
	public void arbitrer(Jeu jeu) throws CoupInvalideException{
		assert(jeu != null);
		Joueur tourPlayer = joueur1;
		boolean tourJoueur1 = true;
		boolean triche = false;
		boolean replay = false;
		do {
				tourPlayer = swapTour(jeu, tourJoueur1, replay);
				replay = false;
				
				try {
				int prise = getPrise(jeu, tourPlayer);
				
				afficherPrise(tourPlayer, prise);
				
				// retrait effectif de la prise si tout est fait dans les règles
				jeu.retirer(prise);
				
				}
				
				catch (CoupInvalideException e){
					if (e.getProbleme().equals("triche")) {
						
						System.out.println("Abandon de la partie car " + tourPlayer.getPlayer_name() + " triche !");
						triche = true;}
					else if(e.getProbleme().equals("pas entier") || e.getProbleme().equals("j'ai pas encore joué")){
						tourJoueur1=!tourJoueur1;
						replay=true;
					}
					else {
						System.out.println("Impossible ! Nombre invalide : "+ e.getCoup() + e.getProbleme());
						tourJoueur1=!tourJoueur1;
					}
				}
				
				if(jeu.getNombreAllumettes()>0) {
					tourJoueur1=!tourJoueur1;}
				
		}while(jeu.getNombreAllumettes() >0 && triche == false);
			
		if(jeu.getNombreAllumettes()==0) {
			afficherResultats(tourJoueur1);}
		
	}
		
	
	public Arbitre (Joueur j1, Joueur j2, boolean vigilance) {
		assert(j1!=null);
		assert(j2!=null);
		joueur1=j1;
		joueur2=j2;
		confiant = vigilance;
		
	}
	
	
	
	
	public void afficherResultats(boolean tourJoueur1) {
		Joueur gagnant;
		Joueur perdant;
	
		if (tourJoueur1) {
			gagnant = joueur2;
			perdant = joueur1;
		}else {
			gagnant = joueur1;
			perdant = joueur2;
		}
		System.out.println("");
		System.out.println(perdant.getPlayer_name() +" perd !");
		System.out.println(gagnant.getPlayer_name() + " gagne !");
		
	}
		
	public static void afficherPrise(Joueur joueur, int prise) {
		String nomJoueur = joueur.getPlayer_name();
		if (prise <= 1) {
			System.out.println(nomJoueur + " prend "+ prise + " allumette.");
		}else {
			System.out.println(nomJoueur + " prend " + prise + " allumettes.");
		}
	}
		
		
	public Joueur swapTour(Jeu jeu, boolean tourJoueur1, boolean replay) {
		Joueur joueur;
		if (!replay) {
			System.out.println("");
			System.out.println("Allumettes restantes : " + jeu.getNombreAllumettes());
		}
		
		if(tourJoueur1) {
			joueur = joueur1;
		} else {
			joueur = joueur2;
		}
		

		if (joueur.getStrategie().ToString().equals("Humain")){
			System.out.print(joueur.getPlayer_name() + ", combien d'allumettes ? ");}
		
		return joueur;
	}
	
	
	public int getPrise(Jeu jeu, Joueur joueur) throws CoupInvalideException {
		int prise;
		if (confiant) {
			prise = joueur.getPrise(jeu);
		} else {
			prise = joueur.getPrise(new JeuProxy(jeu));
		}
		return prise;
	}
	

}




