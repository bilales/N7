package allumettes;



/** Lance une partie des 13 allumettes en fonction des arguments fournis
 * sur la ligne de commande.
 * @author	Xavier Crégut
 * @version	$Revision: 1.5 $
 */
public class Jouer {
	



	/** Lancer une partie. En argument sont donnés les deux joueurs sous
	 * la forme nom@stratégie.
	 * @param args la description des deux joueurs
	 */
	public static void main(String[] args) {
		try {
			verifierNombreArguments(args);
			/* Le jeu se joue avec 2 joueurs */
            Joueur joueur1;
            Joueur joueur2;
            boolean Vigilance = false;
       

            if (args.length == 2) {
            	Vigilance = false;
            	String[] j1 = args[0].split("@");
            	joueur1 = new Joueur(j1[0], getStrategie(j1[1]));
            
            
            	String[] j2 = args[1].split("@");
            	joueur2 = new Joueur(j2[0], getStrategie(j2[1]));
            
            }else {
            	if (args[0].equals("-confiant")) {
            		Vigilance = true;
            		String[] j1 = args[1].split("@");
                    joueur1 = new Joueur(j1[0], getStrategie(j1[1]));
                    
                    
                    String[] j2 = args[2].split("@");
                    joueur2 = new Joueur(j2[0], getStrategie(j2[1]));
            	}else {
            		String[] j1 = args[1].split("@");
                    joueur1 = new Joueur(j1[0], getStrategie(j1[1]));
                    
                    
                    String[] j2 = args[2].split("@");
                    joueur2 = new Joueur(j2[0], getStrategie(j2[1]));
            	}
            			
            }


            JeuReel jeu = new JeuReel(13);
              /* Creation de l'arbitre */
            Arbitre arbitre = new Arbitre(joueur1, joueur2, Vigilance);
            try {
				arbitre.arbitrer(jeu);
			} catch (CoupInvalideException e) {
				e.printStackTrace();
			}
        
			

			

		} catch (ConfigurationException e) {
			System.out.println();
			System.out.println("Erreur : " + e.getMessage());
			afficherUsage();
			System.exit(1);
		}
		

		
		
		
	}

	private static void verifierNombreArguments(String[] args) {
		final int nbJoueurs = 2;
		if (args.length < nbJoueurs) {
			throw new ConfigurationException("Trop peu d'arguments : "
					+ args.length);
		}
		if (args.length > nbJoueurs + 1) {
			throw new ConfigurationException("Trop d'arguments : "
					+ args.length);
		}
	}

	/** Afficher des indications sur la manière d'exécuter cette classe. */
	public static void afficherUsage() {
		System.out.println("\n" + "Usage :"
				+ "\n\t" + "java allumettes.Jouer joueur1 joueur2"
				+ "\n\t\t" + "joueur est de la forme nom@stratégie"
				+ "\n\t\t" + "strategie = naif | rapide | expert | humain | tricheur"
				+ "\n"
				+ "\n\t" + "Exemple :"
				+ "\n\t" + "	java allumettes.Jouer Xavier@humain "
					   + "Ordinateur@naif"
				+ "\n"
				);
	}
	
	
    public static Strategie getStrategie(String strategieNom)
    {
    
        String s = strategieNom.toLowerCase();
        
        switch (s){
        case "naif":
        	return new StrategieNaïf();
        case "rapide":
        	return new StrategieRapide();
        case "expert":
        	return new StrategieExpert();
        case "tricheur":
        	return new StrategieTricheur();
        default:
        	return new StrategieHumain();
        }
        


}}
